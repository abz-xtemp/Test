from tkinter import *
from tkinter.scrolledtext import ScrolledText
import datetime
import openpyxl
from tktimepicker import SpinTimePickerModern, constants
from tkcalendar import DateEntry
import os
from math import *
import xlwings
import time
import numpy as np
import traceback
import subprocess
import pandas as pd
from threading import Thread
import copy

class AutoAuto():
    def __init__(self):
        self.Data_Structures()
        self.Read_Automations()
        self.Window = Tk()
        self.Window_Config()
        self.Title_Bar()
        self.Section_Bar()
        self.Function_Frame()
        self.Config_Frame()
        self.Timer_Frame()
        self.Console_Frame()
        
    def Read_Automations(self):
        if self.C_Exists:
            self.Function_Invoke = {}
            Auto_DF = pd.read_excel(self.CTarget, sheet_name='Configuration')
            Automations, Main_Script, Template = Auto_DF['Automation Name'], Auto_DF['Main Script(s)'], Auto_DF['Template (If any)']
            for A, M, T in zip(Automations, Main_Script, Template):
                self.Function_Invoke[A] = [M, False, T]
            self.Py_Interpreter = str(Auto_DF['Interpreter'].iloc[0])
    
    def Run_Schedule_Update(self):
        Target_Date = str(self.Calendar.get_date())
        Target_Time = self.Time.time()
        Target_Time = [T for T in Target_Time]
        Target_Time.pop()
        Target_Time = [int(T) for T in Target_Date.split('-')] + Target_Time + [0]
        Target_Time = datetime.datetime(*Target_Time)
        Current_Time = datetime.datetime.now().strftime('%m/%d/%Y %H:%M:%S')
        Current_Date = [int(T) for T in Current_Time.split(' ')[0].split('/')]
        Current_Time = [int(T) for T in Current_Time.split(' ')[1].split(':')]
        Current_Time = [Current_Date[2]] + Current_Date[:2] + Current_Time
        Current_Time = datetime.datetime(*Current_Time)
        diff = Target_Time - Current_Time
        self.Wait_Period = diff.total_seconds()
        if self.Wait_Period < 0:
            self.Wait_Period = 0
        return self.Wait_Period
    
    def Window_Config(self):
        self.Window.wm_title('Launcher')
        width = 900
        height = 495
        screen_width = self.Window.winfo_screenwidth()
        screen_height = self.Window.winfo_screenheight()
        x = (screen_width/2) - (width/2)
        y = (screen_height/2) - (height/2)
        self.Window.geometry('%dx%d+%d+%d' % (width, height, x, y))
        self.Window.grid_columnconfigure(1, minsize=70, weight=1)
        self.Window.configure(bg='white')
        self.Window.resizable(False, False)
    
    def Title_Bar(self):
        self.Title = Label(self.Window, text='Auto Automation', width=45, padx=0, pady=0, columnspan=10, sticky='e', font=('Ariel', 15, 'bold'), fg='white', bg='sienna4')
        self.Title.grid(row=0, column=0, padx=5, pady=5, columnspan=10, sticky='e')
    
    def Section_Bar(self):
        self.TitleL = Label(self.Window, text='Panel', width=33, height=1, font=('Ariel', 12, 'bold'), fg='white', bg='blue')
        self.TitleL.grid(row=1, column=0, padx=5, pady=5, columnspan=5, sticky='w')
        self.TitleR = Label(self.Window, text='Console', width=54, height=1, font=('Ariel', 12, 'bold'), fg='white', bg='green')
        self.TitleR.grid(row=1, column=5, padx=5, pady=5, columnspan=5, sticky='e')
    
    def Change_Frame(self, Des):
        if Des:
            self.Default_AutoFrame = max(1, self.Default_AutoFrame-1)
        else:
            self.Default_AutoFrame = min(self.Max_AutoFrame, self.Default_AutoFrame+1)
        # print(self.Max_AutoFrame, self.Default_AutoFrame)
        
        if self.Default_AutoFrame not in self.Frame_Map:
            Current_Frame = []
        else:
            Current_Frame = self.Frame_Map[self.Default_AutoFrame]
        # print(self.Frame_Map)
        
        No_Buttons = len(Current_Frame)
        Locs = self.Button_Names[:No_Buttons]
        Colors = []
        Loc_Mapper = {}
        
        for B in Current_Frame:
            if self.Function_Invoke[B][1]:
                Colors.append('green')
            else:
                Colors.append('red')
                
        for Loc, Buttons, Color in zip(Locs, Current_Frame, Colors):
            Loc_Mapper[Loc] = [Buttons, Color]
        # print(Loc_Mapper)
        
        if 'NW' in Loc_Mapper:
            self.Button_OBJS['NW'][0].config(text=Loc_Mapper['NW'][0], command=lambda: self.Toggle_Function('NW', Loc_Mapper['NW'][0]), bg=Loc_Mapper['NW'][1])
            X, Y = self.Button_OBJS['NW'][1], self.Button_OBJS['NW'][2]
            self.Button_OBJS['NW'][0].place(x=X, y=Y)
        else:
            X, Y = self.OutBound
            self.Button_OBJS['NW'][0].place(x=X, y=Y)
            
        if 'NE' in Loc_Mapper:
            self.Button_OBJS['NE'][0].config(text=Loc_Mapper['NE'][0], command=lambda: self.Toggle_Function('NE', Loc_Mapper['NE'][0]), bg=Loc_Mapper['NE'][1])
            X, Y = self.Button_OBJS['NE'][1], self.Button_OBJS['NE'][2]
            self.Button_OBJS['NE'][0].place(x=X, y=Y)
        else:
            X, Y = self.OutBound
            self.Button_OBJS['NE'][0].place(x=X, y=Y)
            
        if 'W' in Loc_Mapper:
            self.Button_OBJS['W'][0].config(text=Loc_Mapper['W'][0], command=lambda: self.Toggle_Function('W', Loc_Mapper['W'][0]), bg=Loc_Mapper['W'][1])
            X, Y = self.Button_OBJS['W'][1], self.Button_OBJS['W'][2]
            self.Button_OBJS['W'][0].place(x=X, y=Y)
        else:
            X, Y = self.OutBound
            self.Button_OBJS['W'][0].place(x=X, y=Y)
            
        if 'E' in Loc_Mapper:
            self.Button_OBJS['E'][0].config(text=Loc_Mapper['E'][0], command=lambda: self.Toggle_Function('E', Loc_Mapper['E'][0]), bg=Loc_Mapper['E'][1])
            X, Y = self.Button_OBJS['E'][1], self.Button_OBJS['E'][2]
            self.Button_OBJS['E'][0].place(x=X, y=Y)
        else:
            X, Y = self.OutBound
            self.Button_OBJS['E'][0].place(x=X, y=Y)
            
        if 'SW' in Loc_Mapper:
            self.Button_OBJS['SW'][0].config(text=Loc_Mapper['SW'][0], command=lambda: self.Toggle_Function('SW', Loc_Mapper['SW'][0]), bg=Loc_Mapper['SW'][1])
            X, Y = self.Button_OBJS['SW'][1], self.Button_OBJS['SW'][2]
            self.Button_OBJS['SW'][0].place(x=X, y=Y)
        else:
            X, Y = self.OutBound
            self.Button_OBJS['SW'][0].place(x=X, y=Y)
            
        if 'SE' in Loc_Mapper:
            self.Button_OBJS['SE'][0].config(text=Loc_Mapper['SE'][0], command=lambda: self.Toggle_Function('SE', Loc_Mapper['SE'][0]), bg=Loc_Mapper['SE'][1])
            X, Y = self.Button_OBJS['SE'][1], self.Button_OBJS['SE'][2]
            self.Button_OBJS['SE'][0].place(x=X, y=Y)
        else:
            X, Y = self.OutBound
            self.Button_OBJS['SE'][0].place(x=X, y=Y)
    
    def Function_Frame(self):
        self.Function = Frame(self.Window, width=335, height=150, background='lightgray', highlightbackground="black", highlightthickness=1)
        self.Function.grid(row=2, column=0, padx=5, pady=0, columnspan=5, sticky='w')
        self.A_Label = Label(self.Function, text='Automations :', font=('Ariel', 12, 'bold'), fg='black', bg='lightgray')
        self.A_Label.place(x=74, y=5)
        self.Yes_Label = Label(self.Function, text='Yes', font=('Ariel', 10, 'bold'), fg='white', bg='green')
        self.Yes_Label.place(x=190, y=5)
        self.No_Label = Label(self.Function, text='No', font=('Ariel', 10, 'bold'), fg='white', bg='red')
        self.No_Label.place(x=235, y=5)
        self.Auto_Adjustment = 40
        self.To_Right = Button(self.Function, text='›', command=lambda: self.Change_Frame(False), width=2, font=('Ariel', 8), fg='black', bg='gray')
        self.To_Right.place(x=305-self.Auto_Adjustment, y=4)
        self.To_Left = Button(self.Function, text='‹', command=lambda: self.Change_Frame(True), width=2, font=('Ariel', 8), fg='black', bg='gray')
        self.To_Left.place(x=4+self.Auto_Adjustment, y=4)
        
        #MAKE BUTTONS
        Button_Names = [KEY for KEY in self.Function_Invoke]
        self.No_Function = len(Button_Names)
        Frame_Group = [Button_Names[i:i+6] for i in range(0, self.No_Function, 6)]
        self.Max_AutoFrame = len(Frame_Group)
        self.Frame_Map = {}
        print(Frame_Group)
        for i in range(self.Default_AutoFrame, self.Max_AutoFrame+1):
            self.Frame_Map[i] = Frame_Group[i-1]
        # print(self.Frame_Map)
        
        self.Button_OBJS = {
            'NW': [Button(self.Function, text='', command='', width=18, font=('Ariel', 10, 'bold'), fg='white', bg='black'), 8, 35],
            'NE': [Button(self.Function, text='', command='', width=18, font=('Ariel', 10, 'bold'), fg='white', bg='black'), 171, 35],
            'W': [Button(self.Function, text='', command='', width=18, font=('Ariel', 10, 'bold'), fg='white', bg='black'), 8, 70],
            'E': [Button(self.Function, text='', command='', width=18, font=('Ariel', 10, 'bold'), fg='white', bg='black'), 171, 70],
            'SW': [Button(self.Function, text='', command='', width=18, font=('Ariel', 10, 'bold'), fg='white', bg='black'), 8, 105],
            'SE': [Button(self.Function, text='', command='', width=18, font=('Ariel', 10, 'bold'), fg='white', bg='black'), 171, 105]
        }
        self.Change_Frame(True)
    
    def Config_Frame(self):
        self.Config = Frame(self.Window, width=335, height=103, background='lightgray', highlightbackground="black", highlightthickness=1)
        self.Config.grid(row=3, column=0, padx=5, pady=5, columnspan=5, sticky='w')
        self.C_Label = Label(self.Config, text='Configuration', font=('Ariel', 12, 'bold'), fg='black', bg='lightgray')
        self.C_Label.place(x=100, y=5)
        self.C_Status = Label(self.Config, font=('Ariel', 12, 'bold'), bg='lightgray')
        self.C_Status.place(x=210, y=5)
        self.C_Ins = Label(self.Config, font=('Ariel', 9, 'italic'), fg='black', bg='lightgray')
        self.C_Ins.place(x=6, y=26)
        self.Schedule_B = Button(self.Config, text='Edit Config', command=self.C_Driver, width=12, font=('Ariel', 12, 'bold'), fg='white', bg='gray')
        self.Schedule_B.place(x=24, y=55)
        
        if self.C_Exists:
            self.C_Status.config(text='[v]', fg='green')
            self.C_Ins.config(text='*Update Automation File paths using the button below*')
            self.Schedule_B.config(text='Edit Config')
        else:
            self.C_Ins.config(text="*Configuration not found, Please create one.*")
            self.C_Status.config(text='[X]', fg='red')
            self.Schedule_B.config(text='Create Config')
            
        self.Refresh_Auto = Button(self.Config, text='Refresh', command=self.Refresh_GUI, width=12, font=('Ariel', 12, 'bold'), fg='white', bg='gray')
        self.Refresh_Auto.place(x=175, y=55)
    
    def Refresh_GUI(self):
        self.Read_Automations()
        Button_Names = [KEY for KEY in self.Function_Invoke]
        self.No_Function = len(Button_Names)
        Frame_Group = [Button_Names[i:i+6] for i in range(0, self.No_Function, 6)]
        self.Max_AutoFrame = len(Frame_Group)
        self.Frame_Map = {}
        for i in range(self.Default_AutoFrame, self.Max_AutoFrame+1):
            self.Frame_Map[i] = Frame_Group[i-1]
        self.Change_Frame(True)
    
    def Timer_Frame(self):
        Slide = 12
        self.Timer = Frame(self.Window, width=335, height=160, background='lightgray', highlightbackground="black", highlightthickness=1)
        self.Timer.grid(row=4, column=0, padx=5, pady=0, columnspan=5, sticky='w')
        self.T_Label = Label(self.Timer, text='Auto-Scheduler', font=('Ariel', 12, 'bold'), fg='black', bg='lightgray')
        self.T_Label.place(x=101, y=5)
        self.F_Date = Label(self.Timer, text=f'(Date Format: MM/DD/YY)', font=('Ariel', 9, 'italic'), fg='black', bg='lightgray')
        self.F_Date.place(x=75, y=30)
        self.SD_Label = Label(self.Timer, text='Date :', font=('Ariel', 11, 'bold'), fg='black', bg='lightgray')
        self.SD_Label.place(x=15+Slide, y=65)
        self.Calendar = DateEntry(self.Timer, width=12, background='darkblue', foreground='white', borderwidth=1)
        self.Calendar.place(x=65+Slide, y=67)
        self.ST_Label = Label(self.Timer, text='Time :', font=('Ariel', 11, 'bold'), fg='black', bg='lightgray')
        self.ST_Label.place(x=167+Slide, y=65)
        self.Time = SpinTimePickerModern(self.Timer)
        self.Time.addAll(constants.HOURS24)
        self.Time.configureAll(bg="gray", height=1, fg="white", font=("Ariel", 11, 'bold'), hoverbg="#404040", hovercolor="white", clickedbg="black", clickedcolor="white")
        self.Time.configure_separator(bg="#404040", fg="#ffffff")
        self.Time.set24Hrs(self.Current_Time[0])
        self.Time.setMins(self.Current_Time[1])
        self.Time.place(x=220+Slide, y=65)
        self.Run_B = Button(self.Timer, text='Run', command=self.Run, width=10, font=('Ariel', 12, 'bold'), fg='white', bg='red4')
        self.Run_B.place(x=40, y=110)
        self.Schedule_B = Button(self.Timer, text='Schedule', command=self.Schedule, width=10, font=('Ariel', 12, 'bold'), fg='white', bg='green')
        self.Schedule_B.place(x=180, y=110)
    
    def Console_Frame(self):
        self.Console_Frame = Frame(self.Window, width=335, height=280, background='lightgray', highlightbackground="black", highlightthickness=1)
        self.Console_Frame.place(x=350, y=66)
        self.Console_Out = ScrolledText(self.Console_Frame, width=65, height=26)
        self.Console_Out.pack(fill=BOTH, side=LEFT, expand=True)
        self.Curr_Data = "Hello there.\nThis is a standard console.\nYour Automation states, outputs, error will appear here.\nThis Window will Keep you updated."
        self.Console_Out.bind('<Control-v>', lambda _: 'break')
        self.Console_Out.bind('<BackSpace>', lambda _: 'break')
        self.Update_Console(self.Curr_Data)
        self.Update_Console("If Configuration Frame doesn't work:\nPlease check for stray MS Excel Application in the task manager.\nThen use 'End task'.")
    
    def Update_Console(self, WData):
        self.Curr_Data += WData
        WData += '\n-----------\n'
        self.Console_Out.insert('end', WData)
    
    def C_Driver(self):
        if self.C_Exists:
            ConfigBook = xlwings.Book(self.CTarget)
        else:
            self.Config_MAKE()
            self.Config_Frame()
    
    def Config_MAKE(self):
        self.C_Exists = True
        Create_WB = xlwings.Book()
        Create_WB.sheets('Sheet1').api.Name = 'Configuration'
        Con_Sheet = Create_WB.sheets('Configuration')
        Con_Sheet.range('A1').value = 'Automation Name'
        Con_Sheet.range('B1').value = 'Main Script(s)'
        Con_Sheet.range('C1').value = 'Template (If any)'
        Con_Sheet.range('D1').value = 'Interpreter'
        Con_Sheet.range('F1').value = '//After adding/updating Automation Paths, Please use refresh button in the App'
        Con_Sheet.range('A1:D1').color = (255, 0, 0)
        Con_Sheet.range('A1:D1').font.color = (255, 255, 255)
        Con_Sheet.range('A1:D1').font.bold = True
        Con_Sheet.range('A1:D1').font.size = 13
        Con_Sheet.range('F1').font.italic = True
        Con_Sheet.range('A1:D1').api.Borders.Weight = 3
        Con_Sheet.range('A1:D1').autofit()
        Con_Sheet.range('A1:D1').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignCenter
        Con_Sheet.range('A1:D1').api.VerticalAlignment = xlwings.constants.VAlign.xlVAlignCenter
        Create_WB.save(self.CTarget)
        Create_WB.close()
    
    def Toggle_Function(self, Loc, Fname):
        Status = self.Function_Invoke[Fname][1]
        if Status:
            ChangeColor = 'red'
        else:
            ChangeColor = 'green'
        self.Button_OBJS[Loc][0].config(bg=ChangeColor)
        self.Function_Invoke[Fname][1] = not Status
    
    def Data_Structures(self):
        self.Py_Interpreter = r'C:\Program Files\PYTHON3.12\python.exe'
        self.OutBound = [100000, 100000]
        self.Button_Names = ['NW', 'NE', 'W', 'E', 'SW', 'SE']
        self.Default_AutoFrame = 1
        self.Max_AutoFrame = 1
        self.FrameWise_Automation = {}
        self.Trigger_Cancel = False
        self.Function_Invoke = {}
        self.Config_Avail = False
        self.Current_Time = datetime.datetime.now().strftime('%H:%M').split(':')
        self.CTarget = os.getcwd()+'\\Config.xlsx'
        self.C_Exists = os.path.exists(self.CTarget)
        self.Wait_Period = 0
        self.Busy = False
    
    def Schedule(self):
        Chosen_Func = [Key for Key in self.Function_Invoke if self.Function_Invoke[Key][1]]
        if len(Chosen_Func) == 0:
            self.Update_Console('No Function is selected to be scheduled.')
        else:
            Funcs = ", ".join(Chosen_Func)
            self.Update_Console("Selected Function(s): " + Funcs)
            self.Wait_Period = self.Run_Schedule_Update()
            if self.Wait_Period == 0:
                self.Update_Console('Please choose a time in the future. Else use "Run" Button.')
            else:
                self.Busy = True
                if self.Busy:
                    T = self.Time.time()
                    T = str(T[0]) + ':' + str(T[1])
                    self.Update_Console('Task scheduled for ' + T + ' at ' + str(self.Calendar.get_date()) + '.')
                    Thread(target=self.Start_Wait).start()
                    self.Schedule_B.config(command=self.Cancel_Schedule, text='Cancel', bg='red4')
    
    def Cancel_Schedule(self):
        self.Trigger_Cancel = True
    
    def Run(self):
        Chosen_Func = [Key for Key in self.Function_Invoke if self.Function_Invoke[Key][1]]
        if len(Chosen_Func) == 0:
            self.Update_Console('No Function is selected to run.')
        else:
            Funcs = ", ".join(Chosen_Func)
            self.Update_Console("Selected Function(s): " + Funcs)
            self.Wait_Period = 0
            self.Update_Console('Running Task(s)')
            Thread(target=self.Start_Wait).start()
            self.Run_B.config(text='Running', command='', bg='gray')
    
    def Start_Wait(self):
        try:
            if self.Busy:
                Time_to_wait = self.Run_Schedule_Update()
                self.Update_Console('Schedule is created, Tasks will be triggered at time.')
                while self.Trigger_Cancel == False and Time_to_wait > 0:
                    time.sleep(1)
                    Time_to_wait -= 1
                if self.Trigger_Cancel:
                    self.Update_Console('Schedule is cancelled.')
                    self.Trigger_Cancel = not self.Trigger_Cancel
            
            To_Be_Done = [Key for Key in self.Function_Invoke if self.Function_Invoke[Key][1]]
            for Auto in To_Be_Done:
                self.Update_Console(f'Executing: {Auto}')
                if not os.path.exists(self.Py_Interpreter):
                    self.Py_Interpreter = 'python'
                Script, _, Template = self.Function_Invoke[Auto]
                Script, Template = str(Script), str(Template)
                if not os.path.exists(Script):
                    self.Update_Console(f'{Auto} Script: {Script} || Not Found || Not Executed')
                    continue
                if not os.path.exists(Template):
                    self.Update_Console(f'{Auto} Template: {Template} || Not Found')
                    Template = ''
                
                LogOut = subprocess.run([self.Py_Interpreter, Script, Template], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                Out = LogOut.stdout.decode('utf-8', 'ignore')
                Err = LogOut.stderr.decode('utf-8', 'ignore')
                if Out != '':
                    self.Update_Console('Output: ' + Out)
                if Err != '':
                    self.Update_Console('Error: ' + Err)
                self.Update_Console(f'Finished: {Auto}')
        except:
            self.Update_Console(f'{traceback.format_exc()}')
        finally:
            self.Update_Console('Tasks successfully completed.')
            self.Busy = False
            self.Schedule_B.config(command=self.Schedule, text='Schedule', bg='green')
            self.Run_B.config(command=self.Run, text='Run', bg='red4')
    
    def Start_Window(self):
        self.Window.mainloop()

if __name__ == "__main__":
    Instance = AutoAuto()
    Instance.Start_Window()
