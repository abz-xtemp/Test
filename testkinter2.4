class RunOnce:
    def __init__(self):
        self.Window = Tk()
        self.Window_Config()
        self.Title_Bar()
        self.Operation_Selection()
        self.Console_Frame()
        self.Window.mainloop()

    def Window_Config(self):
        self.Window.wm_title('Run Once')
        width = 600
        height = 600
        screen_width = self.Window.winfo_screenwidth()
        screen_height = self.Window.winfo_screenheight()
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        self.Window.geometry('%dx%d+%d+%d' % (width, height, x, y))
        self.Window.configure(bg=COLOR_SCHEME["background"])
        self.Window.resizable(False, False)

    def Title_Bar(self):
        self.Title = Label(self.Window, text='Run Once: Select Operation First', width=45, padx=0, pady=0, 
                         font=('Arial', 16, 'bold'), fg='white', bg=COLOR_SCHEME["primary"])
        self.Title.grid(row=0, column=0, padx=5, pady=20, columnspan=10, sticky='e')

    def Operation_Selection(self):
        self.Operation_Frame = Frame(self.Window, width=550, height=100, bg=COLOR_SCHEME["frame_bg"], 
                                   highlightbackground="black", highlightthickness=1)
        self.Operation_Frame.grid(row=1, column=0, padx=5, pady=10)

        self.DayMovement_Button = Button(self.Operation_Frame, text='Day Movement', command=self.Day_Movement_Inputs, 
                                       font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["secondary"], 
                                       relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.DayMovement_Button.grid(row=0, column=0, padx=20, pady=20)

        self.PPTMerge_Button = Button(self.Operation_Frame, text='Merge PPTs', command=self.PPT_Merge_Inputs,
                                   font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["highlight"],
                                   relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.PPTMerge_Button.grid(row=0, column=1, padx=20, pady=20)

        self.Dynamic_Frame = Frame(self.Window, width=550, height=400, bg=COLOR_SCHEME["frame_bg"])
        self.Dynamic_Frame.grid(row=2, column=0, padx=5, pady=10)
        self.Dynamic_Frame.grid_remove()

    def Day_Movement_Inputs(self):
        for widget in self.Dynamic_Frame.winfo_children():
            widget.destroy()

        self.Dynamic_Frame.grid()
        self.current_operation = "day_movement"

        # File inputs
        self.File1_Label = Label(self.Dynamic_Frame, text='File 1:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File1_Label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.File1_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File1_Entry.grid(row=0, column=1, padx=5, pady=5)
        self.File1_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File1_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File1_Browse.grid(row=0, column=2, padx=5, pady=5)

        self.File2_Label = Label(self.Dynamic_Frame, text='File 2:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File2_Label.grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.File2_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File2_Entry.grid(row=1, column=1, padx=5, pady=5)
        self.File2_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File2_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File2_Browse.grid(row=1, column=2, padx=5, pady=5)

        # Operation inputs
        self.SheetName_Label = Label(self.Dynamic_Frame, text='Sheet Name:', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.SheetName_Label.grid(row=2, column=0, padx=5, pady=5, sticky='w')
        self.SheetName_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.SheetName_Entry.grid(row=2, column=1, padx=5, pady=5)

        self.CellRange_Label = Label(self.Dynamic_Frame, text='Cell Range (e.g., A1:K26):', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.CellRange_Label.grid(row=3, column=0, padx=5, pady=5, sticky='w')
        self.CellRange_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.CellRange_Entry.grid(row=3, column=1, padx=5, pady=5)

        self.Run_Button = Button(self.Dynamic_Frame, text='Run', command=self.Run_Day_Movement, width=20, 
                              font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["success"], 
                              relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Run_Button.grid(row=4, column=0, columnspan=3, padx=5, pady=20)

    def PPT_Merge_Inputs(self):
        for widget in self.Dynamic_Frame.winfo_children():
            widget.destroy()

        self.Dynamic_Frame.grid()
        self.current_operation = "ppt_merge"

        # File inputs
        self.File1_Label = Label(self.Dynamic_Frame, text='PPT File A:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File1_Label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.File1_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File1_Entry.grid(row=0, column=1, padx=5, pady=5)
        self.File1_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File1_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File1_Browse.grid(row=0, column=2, padx=5, pady=5)

        self.File2_Label = Label(self.Dynamic_Frame, text='PPT File B:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File2_Label.grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.File2_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File2_Entry.grid(row=1, column=1, padx=5, pady=5)
        self.File2_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File2_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File2_Browse.grid(row=1, column=2, padx=5, pady=5)

        # Operation inputs
        self.SlideToMerge_Label = Label(self.Dynamic_Frame, text='Slide to Merge:', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.SlideToMerge_Label.grid(row=2, column=0, padx=5, pady=5, sticky='w')
        self.SlideToMerge_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.SlideToMerge_Entry.grid(row=2, column=1, padx=5, pady=5)

        self.MergePosition_Label = Label(self.Dynamic_Frame, text='Merge Position:', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.MergePosition_Label.grid(row=3, column=0, padx=5, pady=5, sticky='w')
        self.MergePosition_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.MergePosition_Entry.grid(row=3, column=1, padx=5, pady=5)

        self.Run_Button = Button(self.Dynamic_Frame, text='Run', command=self.Run_PPT_Merge, width=20, 
                              font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["success"], 
                              relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Run_Button.grid(row=4, column=0, columnspan=3, padx=5, pady=20)

    def Browse_File(self, entry_widget):
        file_path = filedialog.askopenfilename(title="Select File", filetypes=(("All Files", "*.*"),))
        if file_path:
            entry_widget.delete(0, END)
            entry_widget.insert(0, file_path)

    def Run_Day_Movement(self):
        file1 = self.File1_Entry.get()
        file2 = self.File2_Entry.get()
        sheet_name = self.SheetName_Entry.get()
        cell_range = self.CellRange_Entry.get()

        if not all([file1, file2, sheet_name, cell_range]):
            self.Update_Console("Please fill in all fields.")
            return

        output_file = "Day_Movement_Output.xlsx"
        result = self.process_day_movement(file1, file2, sheet_name, cell_range, output_file)

        if result:
            self.Update_Console(f"Processing complete. File saved as {output_file}.")
            self.Show_Download_Button(result)
        else:
            self.Update_Console("Error processing files. Please check the inputs and try again.")

    def Run_PPT_Merge(self):
        file1 = self.File1_Entry.get()
        file2 = self.File2_Entry.get()
        slide_to_merge = self.SlideToMerge_Entry.get()
        merge_position = self.MergePosition_Entry.get()

        if not all([file1, file2, slide_to_merge, merge_position]):
            self.Update_Console("Please fill in all fields.")
            return

        output_file = "Merged_Presentation.pptx"
        result = self.process_ppt_merge(file1, file2, slide_to_merge, merge_position)

        if result:
            self.Update_Console(f"Processing complete. File saved as {output_file}.")
            self.Show_Download_Button(result)
        else:
            self.Update_Console("Error processing files. Please check the inputs and try again.")

    def process_day_movement(self, file1, file2, sheet_name, cell_range, output_file):
        try:
            df1 = pd.read_excel(file1, sheet_name=sheet_name, engine="openpyxl")
            df2 = pd.read_excel(file2, sheet_name=sheet_name, engine="openpyxl")

            start_col, start_row, end_col, end_row = self.parse_cell_range(cell_range)

            df1_values = df1.iloc[start_row:end_row, start_col:end_col].astype(float)
            df2_values = df2.iloc[start_row:end_row, start_col:end_col].astype(float)
            day_movement = df2_values - df1_values

            df = pd.DataFrame(day_movement)

            with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='Day Movement')

            return output_file

        except Exception as e:
            self.Update_Console(f"Error: {e}")
            return None

    def process_ppt_merge(self, ppt_file_A, ppt_file_B, slide_to_merge, merge_position):
        try:
            import win32com.client
            import pythoncom
            import tempfile
            import time
            import os

            pythoncom.CoInitialize()
            
            with open(ppt_file_A, 'rb') as f1, open(ppt_file_B, 'rb') as f2:
                ppt_data_A = f1.read()
                ppt_data_B = f2.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as temp_A, \
                 tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as temp_B:

                temp_A.write(ppt_data_A)
                temp_B.write(ppt_data_B)

                temp_A_path = temp_A.name
                temp_B_path = temp_B.name

            pptApp = win32com.client.Dispatch("PowerPoint.Application")
            pptApp.Visible = True
            
            time.sleep(1)

            presentation_A = pptApp.Presentations.Open(temp_A_path, ReadOnly=False, WithWindow=True)
            time.sleep(0.5)
            
            presentation_B = pptApp.Presentations.Open(temp_B_path, ReadOnly=False, WithWindow=True)
            time.sleep(0.5)

            slides_A = presentation_A.Slides
            slides_B = presentation_B.Slides
            
            slide_to_merge = int(slide_to_merge)
            merge_position = int(merge_position)

            if slide_to_merge < 1 or slide_to_merge > slides_A.Count:
                raise ValueError(f"Invalid slide number {slide_to_merge} in PPT A!")
            
            if merge_position < 1 or merge_position > slides_B.Count + 1:
                raise ValueError(f"Invalid merge position {merge_position} in PPT B!")

            slides_A(slide_to_merge).Copy()
            time.sleep(0.5)
            
            presentation_B.Windows(1).Activate()
            time.sleep(0.3)
            
            slides_B.Paste(Index=merge_position)
            time.sleep(0.5)

            output_file = os.path.join(os.path.dirname(temp_B_path), "merged_presentation.pptx")
            presentation_B.SaveAs(output_file)
            time.sleep(0.5)

            presentation_A.Close()
            presentation_B.Close()
            pptApp.Quit()
            
            try:
                os.remove(temp_A_path)
                os.remove(temp_B_path)
            except:
                pass

            pythoncom.CoUninitialize()
            
            return output_file

        except Exception as e:
            error_msg = f"Error: {str(e)}"
            self.Update_Console(error_msg)
            
            try:
                if 'presentation_A' in locals():
                    presentation_A.Close()
            except:
                pass
                
            try:
                if 'presentation_B' in locals():
                    presentation_B.Close()
            except:
                pass
                
            try:
                if 'pptApp' in locals():
                    pptApp.Quit()
            except:
                pass
                
            try:
                pythoncom.CoUninitialize()
            except:
                pass
                
            return None

    def parse_cell_range(self, cell_range):
        match = re.match(r"([A-Z]+)(\d+):([A-Z]+)(\d+)", cell_range)
        if not match:
            raise ValueError("Invalid cell range format. Use format like 'A1:D10'.")

        start_col, start_row, end_col, end_row = match.groups()

        def col_to_index(col):
            index = 0
            for char in col:
                index = index * 26 + (ord(char) - ord('A') + 1)
            return index - 1

        start_col_index = col_to_index(start_col)
        start_row_index = int(start_row) - 1
        end_col_index = col_to_index(end_col) + 1
        end_row_index = int(end_row)

        return start_col_index, start_row_index, end_col_index, end_row_index

    def Show_Download_Button(self, file_path):
        for widget in self.Dynamic_Frame.winfo_children():
            if isinstance(widget, Button) and widget['text'] == 'Download Final File':
                widget.destroy()

        self.Download_Button = Button(self.Dynamic_Frame, text='Download Final File', 
                                    command=lambda: self.Download_File(file_path), 
                                    font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["accent"], 
                                    relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Download_Button.grid(row=5, column=0, columnspan=3, padx=5, pady=10)

    def Download_File(self, file_path):
        try:
            os.startfile(file_path)
        except Exception as e:
            self.Update_Console(f"Error opening file: {e}")

    def Console_Frame(self):
        self.Console_Frame = Frame(self.Window, width=550, height=200, bg=COLOR_SCHEME["frame_bg"], 
                                 highlightbackground="black", highlightthickness=1)
        self.Console_Frame.grid(row=3, column=0, padx=5, pady=10)

        self.Console_Out = ScrolledText(self.Console_Frame, width=65, height=10, 
                                      bg=COLOR_SCHEME["frame_bg"], fg=COLOR_SCHEME["text"])
        self.Console_Out.pack(fill=BOTH, side=LEFT, expand=True)

        self.Curr_Data = "Console Output:\n"
        self.Console_Out.bind('<Control-v>', lambda _: 'break')
        self.Console_Out.bind('<BackSpace>', lambda _: 'break')
        self.Update_Console(self.Curr_Data)

    def Update_Console(self, WData):
        self.Curr_Data += WData + '\n'
        self.Console_Out.insert('end', WData + '\n')
        self.Console_Out.see('end')
