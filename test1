import customtkinter as ctk
from customtkinter import CTkLabel, CTkButton, CTkFrame
import tkinter as tk
from tkinter.scrolledtext import ScrolledText
import datetime
import openpyxl
from tktimepicker import SpinTimePickerModern, constants
from tkcalendar import DateEntry
import os
from math import *
import xlwings
import time
import numpy as np
import traceback
import subprocess
import pandas as pd
from threading import Thread
import copy

# Set appearance mode and default color theme
ctk.set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"
ctk.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

# Define custom colors for better UI
CUSTOM_COLORS = {
    "primary": "#4CAF50",  # Green
    "secondary": "#2196F3",  # Blue
    "accent": "#FFC107",  # Amber
    "background": "#F5F5F5",  # Light gray
    "text": "#212121",  # Dark gray
    "error": "#F44336",  # Red
    "success": "#4CAF50",  # Green
    "warning": "#FF9800",  # Orange
}

class AutoAuto():
    def __init__(self):
        self.Data_Structures()
        self.Read_Automations()
        self.Window = ctk.CTk()
        self.Window_Config()
        self.Title_Bar()
        self.Section_Bar()
        self.Function_Frame()
        self.Config_Frame()
        self.Timer_Frame()
        self.Console_Frame()

    def Read_Automations(self):
        if self.C_Exists:
            self.Function_Invoke = {}
            Auto_DF = pd.read_excel(self.CTarget, sheet_name='Configuration')
            Automations, Main_Script, Template = Auto_DF['Automation Name'], Auto_DF['Main Script(s)'], Auto_DF['Template (If any)']
            for A, M, T in zip(Automations, Main_Script, Template):
                self.Function_Invoke[A] = [M, False, T]
            self.Py_Interpreter = str(Auto_DF['Interpreter'].iloc[0])

    def Run_Schedule_Update(self):
        Target_Date = str(self.Calendar.get_date())
        Target_Time = self.Time.time()
        Target_Time = [T for T in Target_Time]
        Target_Time.pop()
        Target_Time = [int(T) for T in Target_Date.split('-')] + Target_Time + [0]
        Target_Time = datetime.datetime(*Target_Time)
        Current_Time = datetime.datetime.now().strftime('%m/%d/%Y %H:%M:%S')
        Current_Date = [int(T) for T in Current_Time.split(' ')[0].split('/')]
        Current_Time = [int(T) for T in Current_Time.split(' ')[1].split(':')]
        Current_Time = [Current_Date[2]] + Current_Date[:2] + Current_Time
        Current_Time = datetime.datetime(*Current_Time)
        diff = Target_Time - Current_Time
        self.Wait_Period = diff.total_seconds()
        if self.Wait_Period < 0:
            self.Wait_Period = 0
        return self.Wait_Period

    def Window_Config(self):
        self.Window.title('Launcher')
        width = 900
        height = 495
        screen_width = self.Window.winfo_screenwidth()
        screen_height = self.Window.winfo_screenheight()
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        self.Window.geometry('%dx%d+%d+%d' % (width, height, x, y))
        self.Window.grid_columnconfigure(1, minsize=70, weight=1)
        self.Window.resizable(False, False)
        self.Window.configure(bg=CUSTOM_COLORS["background"])

    def Title_Bar(self):
        self.Title = CTkLabel(self.Window, text='Auto Automation', width=45, height=40, corner_radius=8,
                              font=('Ariel', 15, 'bold'), fg_color=CUSTOM_COLORS["primary"], text_color="white")
        self.Title.grid(row=0, column=0, padx=10, pady=10, columnspan=10, sticky='e')

    def Section_Bar(self):
        self.TitleL = CTkLabel(self.Window, text='Panel', width=33, height=30, corner_radius=8,
                               font=('Ariel', 12, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white")
        self.TitleL.grid(row=1, column=0, padx=10, pady=5, columnspan=5, sticky='w')

        self.TitleR = CTkLabel(self.Window, text='Console', width=54, height=30, corner_radius=8,
                               font=('Ariel', 12, 'bold'), fg_color=CUSTOM_COLORS["accent"], text_color="white")
        self.TitleR.grid(row=1, column=5, padx=10, pady=5, columnspan=5, sticky='e')

    def Function_Frame(self):
        self.Function = CTkFrame(self.Window, width=335, height=150, corner_radius=10, fg_color=CUSTOM_COLORS["background"])
        self.Function.grid(row=2, column=0, padx=10, pady=5, columnspan=5, sticky='w')

        self.A_Label = CTkLabel(self.Function, text='Automations :', font=('Ariel', 12, 'bold'), text_color=CUSTOM_COLORS["text"])
        self.A_Label.place(x=10, y=5)

        self.Yes_Label = CTkLabel(self.Function, text='Yes', font=('Ariel', 10, 'bold'),
                               fg_color=CUSTOM_COLORS["success"], text_color="white", width=40, height=25, corner_radius=5)
        self.Yes_Label.place(x=150, y=5)

        self.No_Label = CTkLabel(self.Function, text='No', font=('Ariel', 10, 'bold'),
                              fg_color=CUSTOM_COLORS["error"], text_color="white", width=40, height=25, corner_radius=5)
        self.No_Label.place(x=200, y=5)

        self.To_Right = CTkButton(self.Function, text='›', command=lambda: self.Change_Frame(False), width=30,
                               height=25, font=('Ariel', 12), fg_color=CUSTOM_COLORS["secondary"], hover_color=CUSTOM_COLORS["accent"])
        self.To_Right.place(x=290, y=5)

        self.To_Left = CTkButton(self.Function, text='‹', command=lambda: self.Change_Frame(True), width=30,
                              height=25, font=('Ariel', 12), fg_color=CUSTOM_COLORS["secondary"], hover_color=CUSTOM_COLORS["accent"])
        self.To_Left.place(x=10, y=5)

        # Button positions
        self.Button_OBJS = {
            'NW': [CTkButton(self.Function, text='', command='', width=160, height=30,
                          font=('Ariel', 10, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white",
                          corner_radius=8, hover_color=CUSTOM_COLORS["accent"]), 10, 40],
            'NE': [CTkButton(self.Function, text='', command='', width=160, height=30,
                          font=('Ariel', 10, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white",
                          corner_radius=8, hover_color=CUSTOM_COLORS["accent"]), 170, 40],
            'W': [CTkButton(self.Function, text='', command='', width=160, height=30,
                         font=('Ariel', 10, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white",
                         corner_radius=8, hover_color=CUSTOM_COLORS["accent"]), 10, 80],
            'E': [CTkButton(self.Function, text='', command='', width=160, height=30,
                         font=('Ariel', 10, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white",
                         corner_radius=8, hover_color=CUSTOM_COLORS["accent"]), 170, 80],
            'SW': [CTkButton(self.Function, text='', command='', width=160, height=30,
                          font=('Ariel', 10, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white",
                          corner_radius=8, hover_color=CUSTOM_COLORS["accent"]), 10, 120],
            'SE': [CTkButton(self.Function, text='', command='', width=160, height=30,
                          font=('Ariel', 10, 'bold'), fg_color=CUSTOM_COLORS["secondary"], text_color="white",
                          corner_radius=8, hover_color=CUSTOM_COLORS["accent"]), 170, 120]
        }
        self.Change_Frame(True)

    def Config_Frame(self):
        self.Config = CTkFrame(self.Window, width=335, height=103, corner_radius=10, fg_color=CUSTOM_COLORS["background"])
        self.Config.grid(row=3, column=0, padx=10, pady=5, columnspan=5, sticky='w')

        self.C_Label = CTkLabel(self.Config, text='Configuration', font=('Ariel', 12, 'bold'), text_color=CUSTOM_COLORS["text"])
        self.C_Label.place(x=10, y=5)

        self.C_Status = CTkLabel(self.Config, font=('Ariel', 12, 'bold'), text_color=CUSTOM_COLORS["text"])
        self.C_Status.place(x=150, y=5)

        self.C_Ins = CTkLabel(self.Config, font=('Ariel', 9), text_color=CUSTOM_COLORS["text"])
        self.C_Ins.place(x=10, y=30)

        config_button_color = CUSTOM_COLORS["secondary"]
        if self.C_Exists:
            self.C_Status.configure(text='[v]', text_color=CUSTOM_COLORS["success"])
            self.C_Ins.configure(text='*Update Automation File paths using the button below*')
            config_button_text = 'Edit Config'
        else:
            self.C_Ins.configure(text="*Configuration not found, Please create one.*")
            self.C_Status.configure(text='[X]', text_color=CUSTOM_COLORS["error"])
            config_button_text = 'Create Config'

        self.Schedule_B = CTkButton(self.Config, text=config_button_text, command=self.C_Driver, width=140,
                                 height=35, font=('Ariel', 12, 'bold'), fg_color=config_button_color,
                                 hover_color=CUSTOM_COLORS["accent"], corner_radius=8)
        self.Schedule_B.place(x=10, y=60)

        self.Refresh_Auto = CTkButton(self.Config, text='Refresh', command=self.Refresh_GUI, width=140,
                                  height=35, font=('Ariel', 12, 'bold'), fg_color=CUSTOM_COLORS["secondary"],
                                  hover_color=CUSTOM_COLORS["accent"], corner_radius=8)
        self.Refresh_Auto.place(x=160, y=60)

    def Timer_Frame(self):
        self.Timer = CTkFrame(self.Window, width=335, height=160, corner_radius=10, fg_color=CUSTOM_COLORS["background"])
        self.Timer.grid(row=4, column=0, padx=10, pady=5, columnspan=5, sticky='w')

        self.T_Label = CTkLabel(self.Timer, text='Auto-Scheduler', font=('Ariel', 12, 'bold'), text_color=CUSTOM_COLORS["text"])
        self.T_Label.place(x=10, y=5)

        self.F_Date = CTkLabel(self.Timer, text=f'(Date Format: MM/DD/YY)', font=('Ariel', 9), text_color=CUSTOM_COLORS["text"])
        self.F_Date.place(x=10, y=30)

        self.SD_Label = CTkLabel(self.Timer, text='Date :', font=('Ariel', 11, 'bold'), text_color=CUSTOM_COLORS["text"])
        self.SD_Label.place(x=10, y=60)

        date_frame = tk.Frame(self.Timer, bg=CUSTOM_COLORS["background"])
        date_frame.place(x=60, y=60)

        self.Calendar = DateEntry(date_frame, width=12, background='darkblue', foreground='white', borderwidth=1)
        self.Calendar.pack()

        self.ST_Label = CTkLabel(self.Timer, text='Time :', font=('Ariel', 11, 'bold'), text_color=CUSTOM_COLORS["text"])
        self.ST_Label.place(x=160, y=60)

        time_frame = tk.Frame(self.Timer, bg=CUSTOM_COLORS["background"])
        time_frame.place(x=210, y=60)

        self.Time = SpinTimePickerModern(time_frame)
        self.Time.addAll(constants.HOURS24)
        self.Time.configureAll(bg=CUSTOM_COLORS["background"], height=1, fg="white", font=("Ariel", 11, 'bold'),
                            hoverbg=CUSTOM_COLORS["accent"], hovercolor="white", clickedbg="black", clickedcolor="white")
        self.Time.configure_separator(bg=CUSTOM_COLORS["accent"], fg="#ffffff")
        self.Time.set24Hrs(self.Current_Time[0])
        self.Time.setMins(self.Current_Time[1])
        self.Time.pack()

        self.Run_B = CTkButton(self.Timer, text='Run', command=self.Run, width=140, height=35,
                            font=('Ariel', 12, 'bold'), fg_color=CUSTOM_COLORS["error"], hover_color=CUSTOM_COLORS["warning"],
                            corner_radius=8)
        self.Run_B.place(x=10, y=110)

        self.Schedule_B = CTkButton(self.Timer, text='Schedule', command=self.Schedule, width=140, height=35,
                                font=('Ariel', 12, 'bold'), fg_color=CUSTOM_COLORS["success"], hover_color=CUSTOM_COLORS["accent"],
                                corner_radius=8)
        self.Schedule_B.place(x=160, y=110)

    def Console_Frame(self):
        self.Console_Frame = CTkFrame(self.Window, width=335, height=405, corner_radius=10, fg_color=CUSTOM_COLORS["background"])
        self.Console_Frame.place(x=350, y=66)

        self.Console_Out = ScrolledText(self.Console_Frame, width=65, height=26, bg=CUSTOM_COLORS["background"],
                                    font=("Consolas", 10), fg=CUSTOM_COLORS["text"])
        self.Console_Out.pack(fill="both", side="left", expand=True, padx=5, pady=5)

        self.Curr_Data = "Hello there.\nThis is a standard console.\nYour Automation states, outputs, error will appear here.\nThis Window will Keep you updated."
        self.Console_Out.bind('<Control-v>', lambda _: 'break')
        self.Console_Out.bind('<BackSpace>', lambda _: 'break')
        self.Update_Console(self.Curr_Data)
        self.Update_Console("If Configuration Frame doesn't work:\nPlease check for stray MS Excel Application in the task manager.\nThen use 'End task'.")

    def Update_Console(self, WData):
        self.Curr_Data += WData
        WData += '\n-----------\n'
        self.Console_Out.insert('end', WData)

    def Start_Window(self):
        self.Window.mainloop()

if __name__ == "__main__":
    Instance = AutoAuto()
    Instance.Start_Window()
