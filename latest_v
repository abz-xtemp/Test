from tkinter import *
from tkinter import filedialog
from tkinter.scrolledtext import ScrolledText
import datetime
import openpyxl
from tktimepicker import SpinTimePickerModern, constants
from tkcalendar import DateEntry
import os
import xlwings
import time
import traceback
import subprocess
import pandas as pd
from threading import Thread

# Define a modern and aesthetic color scheme
COLOR_SCHEME = {
    "background": "#F5F5F5",  # Light gray background
    "primary": "#4CAF50",  # Green for primary elements
    "secondary": "#2196F3",  # Blue for secondary elements
    "accent": "#FFC107",  # Amber for accents
    "error": "#F44336",  # Red for errors
    "success": "#4CAF50",  # Green for success
    "text": "#212121",  # Dark gray for text
    "button_bg": "#E0E0E0",  # Light gray for buttons
    "button_fg": "#000000",  # Black for button text
    "button_hover": "#BDBDBD",  # Darker gray for button hover
    "frame_bg": "#FFFFFF",  # White for frames
    "highlight": "#FF5722",  # Orange for highlights
}

class WelcomeScreen:
    def __init__(self):
        self.Window = Tk()
        self.Window_Config()
        self.Title_Bar()
        self.Buttons()
        self.Window.mainloop()

    def Window_Config(self):
        self.Window.wm_title('Auto Automation')
        width = 500
        height = 300
        screen_width = self.Window.winfo_screenwidth()
        screen_height = self.Window.winfo_screenheight()
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        self.Window.geometry('%dx%d+%d+%d' % (width, height, x, y))
        self.Window.configure(bg=COLOR_SCHEME["background"])
        self.Window.resizable(False, False)

    def Title_Bar(self):
        self.Title = Label(self.Window, text='Welcome to Auto Automation', width=45, padx=0, pady=0, 
                           font=('Arial', 16, 'bold'), fg='white', bg=COLOR_SCHEME["primary"])
        self.Title.grid(row=0, column=0, padx=5, pady=20, columnspan=10, sticky='e')

    def Buttons(self):
        self.Excel_Button = Button(self.Window, text='Run/Schedule via Excel', command=self.Open_Excel_GUI, width=20, 
                                   font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                                   relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Excel_Button.grid(row=1, column=0, padx=5, pady=10)

        self.RunOnce_Button = Button(self.Window, text='Run Once', command=self.Open_RunOnce_GUI, width=20, 
                                     font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                                     relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.RunOnce_Button.grid(row=2, column=0, padx=5, pady=10)

    def Open_Excel_GUI(self):
        self.Window.destroy()
        Instance = AutoAuto()
        Instance.Start_Window()

    def Open_RunOnce_GUI(self):
        self.Window.destroy()
        Instance = RunOnce()
        Instance.Start_Window()


class RunOnce:
    def __init__(self):
        self.Window = Tk()
        self.Window_Config()
        self.Title_Bar()
        self.Operation_Selection()
        self.Console_Frame()
        self.Window.mainloop()

    def Window_Config(self):
        self.Window.wm_title('Run Once')
        width = 600
        height = 600
        screen_width = self.Window.winfo_screenwidth()
        screen_height = self.Window.winfo_screenheight()
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        self.Window.geometry('%dx%d+%d+%d' % (width, height, x, y))
        self.Window.configure(bg=COLOR_SCHEME["background"])
        self.Window.resizable(False, False)

    def Title_Bar(self):
        self.Title = Label(self.Window, text='Run Once: Select Operation First', width=45, padx=0, pady=0, 
                         font=('Arial', 16, 'bold'), fg='white', bg=COLOR_SCHEME["primary"])
        self.Title.grid(row=0, column=0, padx=5, pady=20, columnspan=10, sticky='e')

    def Operation_Selection(self):
        self.Operation_Frame = Frame(self.Window, width=550, height=100, bg=COLOR_SCHEME["frame_bg"], 
                                   highlightbackground="black", highlightthickness=1)
        self.Operation_Frame.grid(row=1, column=0, padx=5, pady=10)

        self.DayMovement_Button = Button(self.Operation_Frame, text='Day Movement', command=self.Day_Movement_Inputs, 
                                       font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["secondary"], 
                                       relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.DayMovement_Button.grid(row=0, column=0, padx=20, pady=20)

        self.PPTMerge_Button = Button(self.Operation_Frame, text='Merge PPTs', command=self.PPT_Merge_Inputs,
                                   font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["highlight"],
                                   relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.PPTMerge_Button.grid(row=0, column=1, padx=20, pady=20)

        self.Dynamic_Frame = Frame(self.Window, width=550, height=400, bg=COLOR_SCHEME["frame_bg"])
        self.Dynamic_Frame.grid(row=2, column=0, padx=5, pady=10)
        self.Dynamic_Frame.grid_remove()

    def Day_Movement_Inputs(self):
        for widget in self.Dynamic_Frame.winfo_children():
            widget.destroy()

        self.Dynamic_Frame.grid()
        self.current_operation = "day_movement"

        # File inputs
        self.File1_Label = Label(self.Dynamic_Frame, text='File 1:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File1_Label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.File1_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File1_Entry.grid(row=0, column=1, padx=5, pady=5)
        self.File1_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File1_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File1_Browse.grid(row=0, column=2, padx=5, pady=5)

        self.File2_Label = Label(self.Dynamic_Frame, text='File 2:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File2_Label.grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.File2_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File2_Entry.grid(row=1, column=1, padx=5, pady=5)
        self.File2_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File2_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File2_Browse.grid(row=1, column=2, padx=5, pady=5)

        # Operation inputs
        self.SheetName_Label = Label(self.Dynamic_Frame, text='Sheet Name:', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.SheetName_Label.grid(row=2, column=0, padx=5, pady=5, sticky='w')
        self.SheetName_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.SheetName_Entry.grid(row=2, column=1, padx=5, pady=5)

        self.CellRange_Label = Label(self.Dynamic_Frame, text='Cell Range (e.g., A1:K26):', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.CellRange_Label.grid(row=3, column=0, padx=5, pady=5, sticky='w')
        self.CellRange_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.CellRange_Entry.grid(row=3, column=1, padx=5, pady=5)

        self.Run_Button = Button(self.Dynamic_Frame, text='Run', command=self.Run_Day_Movement, width=20, 
                              font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["success"], 
                              relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Run_Button.grid(row=4, column=0, columnspan=3, padx=5, pady=20)

    def PPT_Merge_Inputs(self):
        for widget in self.Dynamic_Frame.winfo_children():
            widget.destroy()

        self.Dynamic_Frame.grid()
        self.current_operation = "ppt_merge"

        # File inputs
        self.File1_Label = Label(self.Dynamic_Frame, text='PPT File A:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File1_Label.grid(row=0, column=0, padx=5, pady=5, sticky='w')
        self.File1_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File1_Entry.grid(row=0, column=1, padx=5, pady=5)
        self.File1_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File1_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File1_Browse.grid(row=0, column=2, padx=5, pady=5)

        self.File2_Label = Label(self.Dynamic_Frame, text='PPT File B:', font=('Arial', 12), 
                              fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.File2_Label.grid(row=1, column=0, padx=5, pady=5, sticky='w')
        self.File2_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.File2_Entry.grid(row=1, column=1, padx=5, pady=5)
        self.File2_Browse = Button(self.Dynamic_Frame, text='Browse', command=lambda: self.Browse_File(self.File2_Entry), 
                               font=('Arial', 10), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                               relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.File2_Browse.grid(row=1, column=2, padx=5, pady=5)

        # Operation inputs
        self.SlideToMerge_Label = Label(self.Dynamic_Frame, text='Slide to Merge:', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.SlideToMerge_Label.grid(row=2, column=0, padx=5, pady=5, sticky='w')
        self.SlideToMerge_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.SlideToMerge_Entry.grid(row=2, column=1, padx=5, pady=5)

        self.MergePosition_Label = Label(self.Dynamic_Frame, text='Merge Position:', font=('Arial', 12), 
                                   fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.MergePosition_Label.grid(row=3, column=0, padx=5, pady=5, sticky='w')
        self.MergePosition_Entry = Entry(self.Dynamic_Frame, width=40, font=('Arial', 10))
        self.MergePosition_Entry.grid(row=3, column=1, padx=5, pady=5)

        self.Run_Button = Button(self.Dynamic_Frame, text='Run', command=self.Run_PPT_Merge, width=20, 
                              font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["success"], 
                              relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Run_Button.grid(row=4, column=0, columnspan=3, padx=5, pady=20)

    def Browse_File(self, entry_widget):
        file_path = filedialog.askopenfilename(title="Select File", filetypes=(("All Files", "*.*"),))
        if file_path:
            entry_widget.delete(0, END)
            entry_widget.insert(0, file_path)

    def Run_Day_Movement(self):
        file1 = self.File1_Entry.get()
        file2 = self.File2_Entry.get()
        sheet_name = self.SheetName_Entry.get()
        cell_range = self.CellRange_Entry.get()

        if not all([file1, file2, sheet_name, cell_range]):
            self.Update_Console("Please fill in all fields.")
            return

        output_file = "Day_Movement_Output.xlsx"
        result = self.process_day_movement(file1, file2, sheet_name, cell_range, output_file)

        if result:
            self.Update_Console(f"Processing complete. File saved as {output_file}.")
            self.Show_Download_Button(result)
        else:
            self.Update_Console("Error processing files. Please check the inputs and try again.")

    def Run_PPT_Merge(self):
        file1 = self.File1_Entry.get()
        file2 = self.File2_Entry.get()
        slide_to_merge = self.SlideToMerge_Entry.get()
        merge_position = self.MergePosition_Entry.get()

        if not all([file1, file2, slide_to_merge, merge_position]):
            self.Update_Console("Please fill in all fields.")
            return

        output_file = "Merged_Presentation.pptx"
        result = self.process_ppt_merge(file1, file2, slide_to_merge, merge_position)

        if result:
            self.Update_Console(f"Processing complete. File saved as {output_file}.")
            self.Show_Download_Button(result)
        else:
            self.Update_Console("Error processing files. Please check the inputs and try again.")

    def process_day_movement(self, file1, file2, sheet_name, cell_range, output_file):
        try:
            df1 = pd.read_excel(file1, sheet_name=sheet_name, engine="openpyxl")
            df2 = pd.read_excel(file2, sheet_name=sheet_name, engine="openpyxl")

            start_col, start_row, end_col, end_row = self.parse_cell_range(cell_range)

            df1_values = df1.iloc[start_row:end_row, start_col:end_col].astype(float)
            df2_values = df2.iloc[start_row:end_row, start_col:end_col].astype(float)
            day_movement = df2_values - df1_values

            df = pd.DataFrame(day_movement)

            with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='Day Movement')

            return output_file

        except Exception as e:
            self.Update_Console(f"Error: {e}")
            return None

    def process_ppt_merge(self, ppt_file_A, ppt_file_B, slide_to_merge, merge_position):
        try:
            import win32com.client
            import pythoncom
            import tempfile
            import time
            import os

            pythoncom.CoInitialize()
            
            with open(ppt_file_A, 'rb') as f1, open(ppt_file_B, 'rb') as f2:
                ppt_data_A = f1.read()
                ppt_data_B = f2.read()

            with tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as temp_A, \
                 tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as temp_B:

                temp_A.write(ppt_data_A)
                temp_B.write(ppt_data_B)

                temp_A_path = temp_A.name
                temp_B_path = temp_B.name

            pptApp = win32com.client.Dispatch("PowerPoint.Application")
            pptApp.Visible = True
            
            time.sleep(1)

            presentation_A = pptApp.Presentations.Open(temp_A_path, ReadOnly=False, WithWindow=True)
            time.sleep(0.5)
            
            presentation_B = pptApp.Presentations.Open(temp_B_path, ReadOnly=False, WithWindow=True)
            time.sleep(0.5)

            slides_A = presentation_A.Slides
            slides_B = presentation_B.Slides
            
            slide_to_merge = int(slide_to_merge)
            merge_position = int(merge_position)

            if slide_to_merge < 1 or slide_to_merge > slides_A.Count:
                raise ValueError(f"Invalid slide number {slide_to_merge} in PPT A!")
            
            if merge_position < 1 or merge_position > slides_B.Count + 1:
                raise ValueError(f"Invalid merge position {merge_position} in PPT B!")

            slides_A(slide_to_merge).Copy()
            time.sleep(0.5)
            
            presentation_B.Windows(1).Activate()
            time.sleep(0.3)
            
            slides_B.Paste(Index=merge_position)
            time.sleep(0.5)

            output_file = os.path.join(os.path.dirname(temp_B_path), "merged_presentation.pptx")
            presentation_B.SaveAs(output_file)
            time.sleep(0.5)

            presentation_A.Close()
            presentation_B.Close()
            pptApp.Quit()
            
            try:
                os.remove(temp_A_path)
                os.remove(temp_B_path)
            except:
                pass

            pythoncom.CoUninitialize()
            
            return output_file

        except Exception as e:
            error_msg = f"Error: {str(e)}"
            self.Update_Console(error_msg)
            
            try:
                if 'presentation_A' in locals():
                    presentation_A.Close()
            except:
                pass
                
            try:
                if 'presentation_B' in locals():
                    presentation_B.Close()
            except:
                pass
                
            try:
                if 'pptApp' in locals():
                    pptApp.Quit()
            except:
                pass
                
            try:
                pythoncom.CoUninitialize()
            except:
                pass
                
            return None

    def parse_cell_range(self, cell_range):
        match = re.match(r"([A-Z]+)(\d+):([A-Z]+)(\d+)", cell_range)
        if not match:
            raise ValueError("Invalid cell range format. Use format like 'A1:D10'.")

        start_col, start_row, end_col, end_row = match.groups()

        def col_to_index(col):
            index = 0
            for char in col:
                index = index * 26 + (ord(char) - ord('A') + 1)
            return index - 1

        start_col_index = col_to_index(start_col)
        start_row_index = int(start_row) - 1
        end_col_index = col_to_index(end_col) + 1
        end_row_index = int(end_row)

        return start_col_index, start_row_index, end_col_index, end_row_index

    def Show_Download_Button(self, file_path):
        for widget in self.Dynamic_Frame.winfo_children():
            if isinstance(widget, Button) and widget['text'] == 'Download Final File':
                widget.destroy()

        self.Download_Button = Button(self.Dynamic_Frame, text='Download Final File', 
                                    command=lambda: self.Download_File(file_path), 
                                    font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["accent"], 
                                    relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Download_Button.grid(row=5, column=0, columnspan=3, padx=5, pady=10)

    def Download_File(self, file_path):
        try:
            os.startfile(file_path)
        except Exception as e:
            self.Update_Console(f"Error opening file: {e}")

    def Console_Frame(self):
        self.Console_Frame = Frame(self.Window, width=550, height=200, bg=COLOR_SCHEME["frame_bg"], 
                                 highlightbackground="black", highlightthickness=1)
        self.Console_Frame.grid(row=3, column=0, padx=5, pady=10)

        self.Console_Out = ScrolledText(self.Console_Frame, width=65, height=10, 
                                      bg=COLOR_SCHEME["frame_bg"], fg=COLOR_SCHEME["text"])
        self.Console_Out.pack(fill=BOTH, side=LEFT, expand=True)

        self.Curr_Data = "Console Output:\n"
        self.Console_Out.bind('<Control-v>', lambda _: 'break')
        self.Console_Out.bind('<BackSpace>', lambda _: 'break')
        self.Update_Console(self.Curr_Data)

    def Update_Console(self, WData):
        self.Curr_Data += WData + '\n'
        self.Console_Out.insert('end', WData + '\n')
        self.Console_Out.see('end')


class AutoAuto:
    def __init__(self):
        self.Data_Structures()
        self.Read_Automations()
        self.Window = Tk()
        self.Window_Config()
        self.Title_Bar()
        self.Section_Bar()
        self.Function_Frame()
        self.Config_Frame()
        self.Timer_Frame()
        self.Console_Frame()

    def Change_Frame(self, Des):
        if Des:
            self.Default_AutoFrame = max(1, self.Default_AutoFrame - 1)
        else:
            self.Default_AutoFrame = min(self.Max_AutoFrame, self.Default_AutoFrame + 1)
        
        if self.Default_AutoFrame not in self.Frame_Map:
            Current_Frame = []
        else:
            Current_Frame = self.Frame_Map[self.Default_AutoFrame]
        
        No_Buttons = len(Current_Frame)
        Locs = self.Button_Names[:No_Buttons]
        Colors = []
        Loc_Mapper = {}
        
        for B in Current_Frame:
            if self.Function_Invoke[B][1]:
                Colors.append(COLOR_SCHEME["success"])  # Green for active
            else:
                Colors.append(COLOR_SCHEME["error"])  # Red for inactive
                
        for Loc, Buttons, Color in zip(Locs, Current_Frame, Colors):
            Loc_Mapper[Loc] = [Buttons, Color]
        
        for loc in Loc_Mapper:
            button_obj = self.Button_OBJS[loc][0]
            button_x = self.Button_OBJS[loc][1]
            button_y = self.Button_OBJS[loc][2]
            
            button_obj.config(
                text=Loc_Mapper[loc][0],
                command=lambda l=loc, fn=Loc_Mapper[loc][0]: self.Toggle_Function(l, fn),
                bg=Loc_Mapper[loc][1],
                fg='white',
                font=('Arial', 10, 'bold'),
                relief='flat',
                activebackground=COLOR_SCHEME["button_hover"]
            )
            button_obj.place(x=button_x, y=button_y)
        
        # Hide unused buttons
        for loc in set(self.Button_Names) - set(Loc_Mapper.keys()):
            self.Button_OBJS[loc][0].place_forget()

    def Read_Automations(self):
        if self.C_Exists:
            try:
                Auto_DF = pd.read_excel(self.CTarget, sheet_name='Configuration')
                
                # Check if required columns exist
                required_columns = ['Automation Name', 'Main Script(s)', 'Template (If any)', 'Interpreter']
                if not all(column in Auto_DF.columns for column in required_columns):
                    self.Update_Console("Error: Required columns are missing in the Excel file.")
                    self.Function_Invoke = {}  # Initialize as empty
                    return
                
                # Check if there is at least one row of data
                if Auto_DF.empty:
                    self.Update_Console("Configuration file is empty. No automations loaded.")
                    self.Function_Invoke = {}  # Initialize as empty
                    return
                
                # Read data
                Automations = Auto_DF['Automation Name']
                Main_Script = Auto_DF['Main Script(s)']
                Template = Auto_DF['Template (If any)']
                self.Py_Interpreter = str(Auto_DF['Interpreter'].iloc[0])  # Get the first interpreter
                
                # Populate Function_Invoke dictionary
                self.Function_Invoke = {}
                for A, M, T in zip(Automations, Main_Script, Template):
                    self.Function_Invoke[A] = [M, False, T]
            
            except Exception as e:
                self.Update_Console(f"Error reading Excel file: {str(e)}")
                self.Function_Invoke = {}  # Initialize as empty
        else:
            self.Update_Console("Configuration file not found. Please create one.")
            self.Function_Invoke = {}  # Initialize as empty

    def C_Driver(self):
        if self.C_Exists:
            try:
                ConfigBook = xlwings.Book(self.CTarget)
            except Exception as e:
                self.Update_Console(f"Error opening Excel file: {str(e)}")
        else:
            self.Config_MAKE()
            self.Config_Frame()

    def Data_Structures(self):
        self.Py_Interpreter = 'python'  # Default interpreter
        self.OutBound = [100000, 100000]
        self.Button_Names = ['NW', 'NE', 'W', 'E', 'SW', 'SE']
        self.Default_AutoFrame = 1
        self.Max_AutoFrame = 1
        self.FrameWise_Automation = {}
        self.Trigger_Cancel = False
        self.Function_Invoke = {}
        self.Config_Avail = False
        self.Current_Time = datetime.datetime.now().strftime('%H:%M').split(':')
        self.CTarget = os.getcwd() + '\\Config.xlsx'
        self.C_Exists = os.path.exists(self.CTarget)
        self.Wait_Period = 0
        self.Busy = False
        self.Curr_Data = ""  # Initialize curr_data

    def Window_Config(self):
        self.Window.wm_title('Launcher')
        width = 900
        height = 495
        screen_width = self.Window.winfo_screenwidth()
        screen_height = self.Window.winfo_screenheight()
        x = (screen_width / 2) - (width / 2)
        y = (screen_height / 2) - (height / 2)
        self.Window.geometry('%dx%d+%d+%d' % (width, height, x, y))
        self.Window.grid_columnconfigure(1, minsize=70, weight=1)
        self.Window.configure(bg=COLOR_SCHEME["background"])
        self.Window.resizable(False, False)

    def Title_Bar(self):
        self.Title = Label(self.Window, text='Auto Automation', width=45, padx=0, pady=0, 
                           font=('Arial', 16, 'bold'), fg='white', bg=COLOR_SCHEME["primary"])
        self.Title.grid(row=0, column=0, padx=5, pady=5, columnspan=10, sticky='e')

    def Section_Bar(self):
        self.TitleL = Label(self.Window, text='Panel', width=33, height=1, 
                           font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["secondary"])
        self.TitleL.grid(row=1, column=0, padx=5, pady=5, columnspan=5, sticky='w')
        
        self.TitleR = Label(self.Window, text='Console', width=54, height=1, 
                           font=('Arial', 12, 'bold'), fg='white', bg=COLOR_SCHEME["accent"])
        self.TitleR.grid(row=1, column=5, padx=5, pady=5, columnspan=5, sticky='e')

    def Function_Frame(self):
        self.Function = Frame(self.Window, width=335, height=150, bg=COLOR_SCHEME["frame_bg"], highlightbackground="black", highlightthickness=1)
        self.Function.grid(row=2, column=0, padx=5, pady=0, columnspan=5, sticky='w')
        
        self.A_Label = Label(self.Function, text='Automations :', font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.A_Label.place(x=74, y=5)
        
        self.Yes_Label = Label(self.Function, text='Yes', font=('Arial', 10, 'bold'), fg='white', bg=COLOR_SCHEME["success"])
        self.Yes_Label.place(x=190, y=5)
        
        self.No_Label = Label(self.Function, text='No', font=('Arial', 10, 'bold'), fg='white', bg=COLOR_SCHEME["error"])
        self.No_Label.place(x=235, y=5)
        
        self.Auto_Adjustment = 40
        self.To_Right = Button(self.Function, text='›', command=lambda: self.Change_Frame(False), width=2, 
                              font=('Arial', 8), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                              relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.To_Right.place(x=305 - self.Auto_Adjustment, y=4)
        
        self.To_Left = Button(self.Function, text='‹', command=lambda: self.Change_Frame(True), width=2, 
                             font=('Arial', 8), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                             relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.To_Left.place(x=4 + self.Auto_Adjustment, y=4)
        
        # MAKE BUTTONS
        Button_Names = [KEY for KEY in self.Function_Invoke]
        self.No_Function = len(Button_Names)
        Frame_Group = [Button_Names[i:i + 6] for i in range(0, self.No_Function, 6)]
        self.Max_AutoFrame = len(Frame_Group)
        self.Frame_Map = {}
        for i in range(self.Default_AutoFrame, self.Max_AutoFrame + 1):
            self.Frame_Map[i] = Frame_Group[i - 1]
        
        self.Button_OBJS = {
            'NW': [Button(self.Function, text='', command='', width=18, font=('Arial', 10, 'bold'), 
                          fg='white', bg='black', relief='flat', activebackground=COLOR_SCHEME["button_hover"]), 8, 35],
            'NE': [Button(self.Function, text='', command='', width=18, font=('Arial', 10, 'bold'), 
                          fg='white', bg='black', relief='flat', activebackground=COLOR_SCHEME["button_hover"]), 171, 35],
            'W': [Button(self.Function, text='', command='', width=18, font=('Arial', 10, 'bold'), 
                         fg='white', bg='black', relief='flat', activebackground=COLOR_SCHEME["button_hover"]), 8, 70],
            'E': [Button(self.Function, text='', command='', width=18, font=('Arial', 10, 'bold'), 
                         fg='white', bg='black', relief='flat', activebackground=COLOR_SCHEME["button_hover"]), 171, 70],
            'SW': [Button(self.Function, text='', command='', width=18, font=('Arial', 10, 'bold'), 
                          fg='white', bg='black', relief='flat', activebackground=COLOR_SCHEME["button_hover"]), 8, 105],
            'SE': [Button(self.Function, text='', command='', width=18, font=('Arial', 10, 'bold'), 
                          fg='white', bg='black', relief='flat', activebackground=COLOR_SCHEME["button_hover"]), 171, 105]
        }
        self.Change_Frame(True)

    def Config_Frame(self):
        self.Config = Frame(self.Window, width=335, height=103, bg=COLOR_SCHEME["frame_bg"], highlightbackground="black", highlightthickness=1)
        self.Config.grid(row=3, column=0, padx=5, pady=5, columnspan=5, sticky='w')
        
        self.C_Label = Label(self.Config, text='Configuration', font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.C_Label.place(x=100, y=5)
        
        self.C_Status = Label(self.Config, font=('Arial', 12, 'bold'), bg=COLOR_SCHEME["frame_bg"])
        self.C_Status.place(x=210, y=5)
        
        self.C_Ins = Label(self.Config, font=('Arial', 9, 'italic'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.C_Ins.place(x=6, y=26)
        
        if self.C_Exists:
            self.C_Status.config(text='[v]', fg=COLOR_SCHEME["success"])
            self.C_Ins.config(text='*Update Automation File paths using the button below*')
            config_button_text = 'Edit Config'
        else:
            self.C_Ins.config(text="*Configuration not found, Please create one.*")
            self.C_Status.config(text='[X]', fg=COLOR_SCHEME["error"])
            config_button_text = 'Create Config'
            
        self.Schedule_B = Button(self.Config, text=config_button_text, command=self.C_Driver, width=12, 
                                 font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                                 relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Schedule_B.place(x=24, y=55)
        
        self.Refresh_Auto = Button(self.Config, text='Refresh', command=self.Refresh_GUI, width=12, 
                                  font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["button_fg"], bg=COLOR_SCHEME["button_bg"], 
                                  relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Refresh_Auto.place(x=175, y=55)

    def Refresh_GUI(self):
        self.Read_Automations()
        Button_Names = [KEY for KEY in self.Function_Invoke]
        self.No_Function = len(Button_Names)
        Frame_Group = [Button_Names[i:i + 6] for i in range(0, self.No_Function, 6)]
        self.Max_AutoFrame = len(Frame_Group)
        self.Frame_Map = {}
        for i in range(self.Default_AutoFrame, self.Max_AutoFrame + 1):
            self.Frame_Map[i] = Frame_Group[i - 1]
        self.Change_Frame(True)
        self.Update_Console("Automations refreshed successfully.")

    def Timer_Frame(self):
        Slide = 12
        self.Timer = Frame(self.Window, width=335, height=160, bg=COLOR_SCHEME["frame_bg"], highlightbackground="black", highlightthickness=1)
        self.Timer.grid(row=4, column=0, padx=5, pady=0, columnspan=5, sticky='w')
        
        self.T_Label = Label(self.Timer, text='Auto-Scheduler', font=('Arial', 12, 'bold'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.T_Label.place(x=101, y=5)
        
        self.F_Date = Label(self.Timer, text=f'(Date Format: MM/DD/YY)', font=('Arial', 9, 'italic'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.F_Date.place(x=75, y=30)
        
        self.SD_Label = Label(self.Timer, text='Date :', font=('Arial', 11, 'bold'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.SD_Label.place(x=15 + Slide, y=65)
        
        self.Calendar = DateEntry(self.Timer, width=12, background='darkblue', foreground='white', borderwidth=1)
        self.Calendar.place(x=65 + Slide, y=67)
        
        self.ST_Label = Label(self.Timer, text='Time :', font=('Arial', 11, 'bold'), fg=COLOR_SCHEME["text"], bg=COLOR_SCHEME["frame_bg"])
        self.ST_Label.place(x=167 + Slide, y=65)
        
        self.Time = SpinTimePickerModern(self.Timer)
        self.Time.addAll(constants.HOURS24)
        self.Time.configureAll(bg="gray", height=1, fg="white", font=("Arial", 11, 'bold'), 
                              hoverbg="#404040", hovercolor="white", clickedbg="black", clickedcolor="white")
        self.Time.configure_separator(bg="#404040", fg="#ffffff")
        self.Time.set24Hrs(self.Current_Time[0])
        self.Time.setMins(self.Current_Time[1])
        self.Time.place(x=220 + Slide, y=65)
        
        self.Run_B = Button(self.Timer, text='Run', command=self.Run, width=10, font=('Arial', 12, 'bold'), 
                           fg='white', bg=COLOR_SCHEME["error"], relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Run_B.place(x=40, y=110)
        
        self.Schedule_B = Button(self.Timer, text='Schedule', command=self.Schedule, width=10, font=('Arial', 12, 'bold'), 
                                fg='white', bg=COLOR_SCHEME["success"], relief='flat', activebackground=COLOR_SCHEME["button_hover"])
        self.Schedule_B.place(x=180, y=110)

    def Console_Frame(self):
        self.Console_Frame = Frame(self.Window, width=335, height=280, bg=COLOR_SCHEME["frame_bg"], highlightbackground="black", highlightthickness=1)
        self.Console_Frame.place(x=350, y=66)
        
        self.Console_Out = ScrolledText(self.Console_Frame, width=65, height=26, bg=COLOR_SCHEME["frame_bg"], fg=COLOR_SCHEME["text"])
        self.Console_Out.pack(fill=BOTH, side=LEFT, expand=True)
        
        self.Curr_Data = "Hello there.\nThis is a standard console.\nYour Automation states, outputs, error will appear here.\nThis Window will Keep you updated."
        self.Console_Out.bind('<Control-v>', lambda _: 'break')
        self.Console_Out.bind('<BackSpace>', lambda _: 'break')
        self.Update_Console(self.Curr_Data)
        self.Update_Console("If Configuration Frame doesn't work:\nPlease check for stray MS Excel Application in the task manager.\nThen use 'End task'.")

    def Update_Console(self, WData):
        self.Curr_Data += WData
        WData += '\n-----------\n'
        self.Console_Out.insert('end', WData)

    def Config_MAKE(self):
        self.C_Exists = True
        Create_WB = xlwings.Book()
        Create_WB.sheets('Sheet1').api.Name = 'Configuration'
        Con_Sheet = Create_WB.sheets('Configuration')
        Con_Sheet.range('A1').value = 'Automation Name'
        Con_Sheet.range('B1').value = 'Main Script(s)'
        Con_Sheet.range('C1').value = 'Template (If any)'
        Con_Sheet.range('D1').value = 'Interpreter'
        Con_Sheet.range('F1').value = '//After adding/updating Automation Paths, Please use refresh button in the App'
        Con_Sheet.range('A1:D1').color = (255, 0, 0)
        Con_Sheet.range('A1:D1').font.color = (255, 255, 255)
        Con_Sheet.range('A1:D1').font.bold = True
        Con_Sheet.range('A1:D1').font.size = 13
        Con_Sheet.range('F1').font.italic = True
        Con_Sheet.range('A1:D1').api.Borders.Weight = 3
        Con_Sheet.range('A1:D1').autofit()
        Con_Sheet.range('A1:D1').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignCenter
        Con_Sheet.range('A1:D1').api.VerticalAlignment = xlwings.constants.VAlign.xlVAlignCenter
        Create_WB.save(self.CTarget)
        Create_WB.close()

    def Toggle_Function(self, Loc, Fname):
        Status = self.Function_Invoke[Fname][1]
        if Status:
            ChangeColor = COLOR_SCHEME["error"]  # Red for inactive
        else:
            ChangeColor = COLOR_SCHEME["success"]  # Green for active
        self.Button_OBJS[Loc][0].config(bg=ChangeColor)
        self.Function_Invoke[Fname][1] = not Status

    def Schedule(self):
        Chosen_Func = [Key for Key in self.Function_Invoke if self.Function_Invoke[Key][1]]
        if len(Chosen_Func) == 0:
            self.Update_Console('No Function is selected to be scheduled.')
        else:
            Funcs = ", ".join(Chosen_Func)
            self.Update_Console("Selected Function(s): " + Funcs)
            self.Wait_Period = self.Run_Schedule_Update()
            if self.Wait_Period == 0:
                self.Update_Console('Please choose a time in the future. Else use "Run" Button.')
            else:
                self.Busy = True
                if self.Busy:
                    T = self.Time.time()
                    T = str(T[0]) + ':' + str(T[1])
                    self.Update_Console('Task scheduled for ' + T + ' at ' + str(self.Calendar.get_date()) + '.')
                    Thread(target=self.Start_Wait).start()
                    self.Schedule_B.config(command=self.Cancel_Schedule, text='Cancel', bg=COLOR_SCHEME["error"])

    def Cancel_Schedule(self):
        self.Trigger_Cancel = True

    def Run(self):
        Chosen_Func = [Key for Key in self.Function_Invoke if self.Function_Invoke[Key][1]]
        if len(Chosen_Func) == 0:
            self.Update_Console('No Function is selected to run.')
        else:
            Funcs = ", ".join(Chosen_Func)
            self.Update_Console("Selected Function(s): " + Funcs)
            self.Wait_Period = 0
            self.Update_Console('Running Task(s)')
            Thread(target=self.Start_Wait).start()
            self.Run_B.config(text='Running', command='', bg=COLOR_SCHEME["button_bg"])

    def Start_Wait(self):
        try:
            if self.Busy:
                Time_to_wait = self.Run_Schedule_Update()
                self.Update_Console('Schedule is created, Tasks will be triggered at time.')
                while self.Trigger_Cancel == False and Time_to_wait > 0:
                    time.sleep(1)
                    Time_to_wait -= 1
                if self.Trigger_Cancel:
                    self.Update_Console('Schedule is cancelled.')
                    self.Trigger_Cancel = not self.Trigger_Cancel
            
            To_Be_Done = [Key for Key in self.Function_Invoke if self.Function_Invoke[Key][1]]
            for Auto in To_Be_Done:
                self.Update_Console(f'Executing: {Auto}')
                if not os.path.exists(self.Py_Interpreter):
                    self.Py_Interpreter = 'python'
                Script, _, Template = self.Function_Invoke[Auto]
                Script, Template = str(Script), str(Template)
                if not os.path.exists(Script):
                    self.Update_Console(f'{Auto} Script: {Script} || Not Found || Not Executed')
                    continue
                if not os.path.exists(Template):
                    self.Update_Console(f'{Auto} Template: {Template} || Not Found')
                    Template = ''
                
                LogOut = subprocess.run([self.Py_Interpreter, Script, Template], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                Out = LogOut.stdout.decode('utf-8', 'ignore')
                Err = LogOut.stderr.decode('utf-8', 'ignore')
                if Out != '':
                    self.Update_Console('Output: ' + Out)
                if Err != '':
                    self.Update_Console('Error: ' + Err)
                self.Update_Console(f'Finished: {Auto}')
        except:
            self.Update_Console(f'{traceback.format_exc()}')
        finally:
            self.Update_Console('Tasks successfully completed.')
            self.Busy = False
            self.Schedule_B.config(command=self.Schedule, text='Schedule', bg=COLOR_SCHEME["success"])
            self.Run_B.config(command=self.Run, text='Run', bg=COLOR_SCHEME["error"])

    def Start_Window(self):
        self.Window.mainloop()


if __name__ == "__main__":
    WelcomeScreen()
