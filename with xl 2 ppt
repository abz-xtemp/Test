# Add these imports to the existing imports
import win32com.client
import pythoncom
import tempfile
import os

# Add this method to the RunOnce class in the original script
def setup_excel_to_ppt_ui(self):
    """Setup UI for Excel to PowerPoint operation"""
    self.clear_dynamic_content()
    self.dynamic_content.grid()
    self.current_operation = "excel_to_ppt"
    
    # File selection
    self.create_file_input("Excel File:", 0)
    self.create_file_input("PowerPoint File:", 1)
    
    # Parameters
    self.create_input_field("Sheet Names (comma-separated):", 2)
    self.create_input_field("Cell Ranges (comma-separated):", 3)
    
    # Run button
    self.create_run_button(self.run_excel_to_ppt, 4)

def run_excel_to_ppt(self):
    """Execute Excel to PowerPoint operation"""
    try:
        # Get input files
        excel_file = self.file_entries[0].get()
        ppt_file = self.file_entries[1].get()
        
        # Get sheet names and cell ranges
        sheet_names = [s.strip() for s in self.input_entries[0].get().split(',')]
        cell_ranges = [r.strip() for r in self.input_entries[1].get().split(',')]
        
        # Validate inputs
        if not all([excel_file, ppt_file, sheet_names, cell_ranges]):
            self.update_console("Error: Please fill in all fields")
            return
        
        # Ensure equal number of sheet names and cell ranges
        if len(sheet_names) != len(cell_ranges):
            self.update_console("Error: Number of sheet names must match number of cell ranges")
            return
        
        # Predefined constants for slide insertion
        SLIDE_WIDTH = 10  # inches
        SLIDE_HEIGHT = 6  # inches
        
        # Process each sheet and range
        output_file = "Excel_to_PPT_Output.pptx"
        current_ppt_file = ppt_file
        
        for i, (sheet_name, cell_range) in enumerate(zip(sheet_names, cell_ranges), 1):
            try:
                result = self.process_excel_to_ppt(
                    current_ppt_file, 
                    excel_file, 
                    sheet_name, 
                    cell_range, 
                    slide_number=i, 
                    slide_width=SLIDE_WIDTH, 
                    slide_height=SLIDE_HEIGHT, 
                    left=1, 
                    top=1
                )
                
                # Update current PPT file for next iteration
                current_ppt_file = result
                
                self.update_console(f"Processed sheet {sheet_name} in cell range {cell_range}")
            
            except Exception as sheet_error:
                self.update_console(f"Error processing sheet {sheet_name}: {str(sheet_error)}")
        
        # Save final output
        if os.path.exists(current_ppt_file):
            os.rename(current_ppt_file, output_file)
            self.update_console(f"Success! Output saved as {output_file}")
            self.show_download_button(output_file)
        else:
            self.update_console("Error: No output file generated")
    
    except Exception as e:
        self.update_console(f"Error: {str(e)}")

def process_excel_to_ppt(self, ppt_file, excel_file, sheet_name, cell_range, slide_number, slide_width, slide_height, left, top, excel_password=None):
    """
    Process Excel data and insert it as a picture into a PowerPoint presentation using Win32 COM.
    """
    temp_files = []  # Keep track of temp files to clean up later
    xlApp = None
    ppApp = None
    
    try:
        # Initialize COM for this thread
        pythoncom.CoInitialize()
        
        # Validate inputs
        if excel_file is None:
            raise ValueError("Excel file is missing")
            
        # Save uploaded files as temporary files
        if ppt_file is None:
            # Create a new presentation
            temp_ppt_path = None
        else:
            temp_ppt_path = ppt_file
            
        temp_xlsx_path = excel_file
            
        # Validate the Excel file exists
        if not os.path.exists(temp_xlsx_path):
            raise FileNotFoundError(f"Excel file not found at path: {temp_xlsx_path}")
            
        # Open Excel
        xlApp = win32com.client.Dispatch("Excel.Application")
        xlApp.Visible = False
        xlApp.DisplayAlerts = False
        
        if excel_password:
            wb = xlApp.Workbooks.Open(temp_xlsx_path, False, True, None, excel_password)
        else:
            wb = xlApp.Workbooks.Open(temp_xlsx_path, False, True)
            
        # Validate sheet name exists
        sheet_names = [sheet.Name for sheet in wb.Sheets]
        if sheet_name not in sheet_names:
            available_sheets = ", ".join(sheet_names)
            raise ValueError(f"Sheet '{sheet_name}' not found. Available sheets: {available_sheets}")
            
        ws = wb.Sheets(sheet_name)
        
        # Select the range
        range_obj = ws.Range(cell_range)
        
        # Copy the range to clipboard
        range_obj.Copy()
        
        # Open PowerPoint
        ppApp = win32com.client.Dispatch("PowerPoint.Application")
        ppApp.Visible = False
        
        # Load or Create PowerPoint
        if temp_ppt_path:
            prs = ppApp.Presentations.Open(temp_ppt_path)
        else:
            prs = ppApp.Presentations.Add()
        
        # Validate slide number
        if slide_number < 1:
            raise ValueError("Slide number must be at least 1")
            
        # Adjust slide count if needed
        while prs.Slides.Count < slide_number:
            prs.Slides.Add(prs.Slides.Count + 1, 5)  # Blank layout
        
        # Select the target slide
        slide = prs.Slides(slide_number)
        
        # Paste special as picture
        slide.Shapes.PasteSpecial(1)  # 1 = ppPasteEnhancedMetafile
        
        # Move and resize the pasted shape
        last_shape = slide.Shapes(slide.Shapes.Count)
        last_shape.Left = Inches(left)
        last_shape.Top = Inches(top)
        last_shape.Width = Inches(slide_width)
        last_shape.Height = Inches(slide_height)
        
        # Save Presentation
        output_ppt = tempfile.NamedTemporaryFile(delete=False, suffix=".pptx").name
        temp_files.append(output_ppt)
        prs.SaveAs(output_ppt)
        
        # Close Excel and PowerPoint
        wb.Close(SaveChanges=False)
        prs.Close()
        
        return output_ppt
        
    except Exception as e:
        self.update_console(f"Error in process_excel_to_ppt: {str(e)}")
        return None
        
    finally:
        # Clean up Excel and PowerPoint applications
        if xlApp:
            try:
                xlApp.Quit()
            except:
                pass
        
        if ppApp:
            try:
                ppApp.Quit()
            except:
                pass
                
        # Uninitialize COM
        pythoncom.CoUninitialize()

# Modify the create_operation_buttons method to include the new operation
def create_operation_buttons(self):
    """Create the initial operation selection buttons"""
    button_frame = Frame(
        self.Window,
        bg=COLOR_SCHEME["frame_bg"],
        highlightbackground="gray",
        highlightthickness=1
    )
    button_frame.grid(row=1, column=0, padx=20, pady=20, sticky='nsew')

    # Create buttons for all operations
    operations = [
        ("ðŸ“Š Day Movement", self.setup_day_movement_ui, COLOR_SCHEME["secondary"]),
        ("ðŸ“‘ Merge PPTs", self.setup_ppt_merge_ui, COLOR_SCHEME["highlight"]),
        ("ðŸ“„ PPT to PDF", self.setup_ppt_to_pdf_ui, COLOR_SCHEME["accent"]),
        ("ðŸ“ˆ Excel to PPT", self.setup_excel_to_ppt_ui, COLOR_SCHEME["primary"])  # New operation
    ]

    for text, command, color in operations:
        Button(
            button_frame,
            text=text,
            command=command,
            font=('Arial', 12, 'bold'),
            fg='white',
            bg=color,
            relief='flat',
            activebackground=COLOR_SCHEME["button_hover"],
            padx=20,
            pady=10
        ).pack(side=LEFT, padx=10, pady=10)

    # Rest of the method remains the same
